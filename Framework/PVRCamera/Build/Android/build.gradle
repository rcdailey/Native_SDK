import org.apache.tools.ant.taskdefs.condition.Os
	
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.1.0'
    }
}

allprojects {
    repositories {
        jcenter()
    }
}

apply plugin: 'com.android.library'

File pvrSdkDir = file("${project.buildDir}/../../../../../../../")

android {
    compileSdkVersion 24
    buildToolsVersion "24.0.1"

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 24
    }
    buildTypes {
        release {
            minifyEnabled false
            //proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            jniDebuggable true
        }
    }
    buildTypes.release.ext.ndkArgs=[]
    buildTypes.debug.ext.ndkArgs=['DEBUG=1','NDK_DEBUG=1']

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jni.srcDirs= []
            jniLibs.srcDir 'libs'

        }
    }

    FileTree tree = fileTree(dir : '../..', includes:['*.pod', '*.pvr', '*.vsh', '*.fsh', '*.csh'])

    String ndkBuildCommand = 'ndk-build';

    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        ndkBuildCommand = 'ndk-build.cmd'
    }

    List<String> ndkArgs = ['-j8']
    if (System.env.APP_ABI) {
        ndkArgs << ' APP_ABI='+System.env.APP_ABI + ''
    }

    android.buildTypes.all{ theBuildType ->
        task ("ndkBuild${theBuildType.name.capitalize()}", type: Exec) {
            executable ndkBuildCommand
            args ndkArgs + theBuildType.ext.ndkArgs
        }
        task ("ndkBuildClean${theBuildType.name.capitalize()}", type: Exec) {
            executable ndkBuildCommand
            args ndkArgs + theBuildType.ext.ndkArgs + 'clean'
        }
        clean.dependsOn tasks.findByName("ndkBuildClean${theBuildType.name.capitalize()}")
    }

    tasks.withType(JavaCompile) {
        theTask ->
            buildTypes.each() { theBuildType ->
                if(theTask.name.contains("compile${theBuildType.name.capitalize()}Java")){
                    theTask.dependsOn "ndkBuild${theBuildType.name.capitalize()}"
                }
            }
    }

    clean {
        doLast() {
            delete "obj"
            delete "bin"
        }
    }

    tasks.withType(Exec) {
        doFirst {
            println commandLine
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
}
