import org.apache.tools.ant.taskdefs.condition.Os
	
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.0.0'
    }
}

allprojects {
    repositories {
        jcenter()
    }
}

apply plugin: 'com.android.application'

File pvrSdkDir = file("${project.buildDir}/../../../../../../../")

android {
    compileSdkVersion 21
    buildToolsVersion "21.1.2"

    defaultConfig {
        applicationId "com.powervr.OGLES3Water"
        minSdkVersion 18
        targetSdkVersion 19
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            jniDebuggable true
        }
    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jni.srcDirs= []
            jniLibs.srcDir 'libs'

        }
    }

    FileCollection tree = files(
"${pvrSdkDir}/Examples/Advanced/Water/OGLES3/normalmap.pvr",
"${pvrSdkDir}/Examples/Advanced/Water/OGLES3/skybox.pvr",
"${pvrSdkDir}/Examples/Advanced/Water/OGLES3/galleon.pvr",
"${pvrSdkDir}/Examples/Advanced/Water/OGLES3/wood.pvr",
"${pvrSdkDir}/Examples/Advanced/Water/OGLES3/coins.pvr",
"${pvrSdkDir}/Examples/Advanced/Water/OGLES3/coins-specular.pvr",
"${pvrSdkDir}/Examples/Advanced/Water/OGLES3/flag.pvr",
"${pvrSdkDir}/Examples/Advanced/Water/OGLES3/crate.pvr",
"${pvrSdkDir}/Examples/Advanced/Water/OGLES3/galleon-sails.pvr",
"${pvrSdkDir}/Examples/Advanced/Water/OGLES3/sand.pvr",
"${pvrSdkDir}/Examples/Advanced/Water/OGLES3/palmleaf.pvr",
"${pvrSdkDir}/Examples/Advanced/Water/OGLES3/FragShader.fsh",
"${pvrSdkDir}/Examples/Advanced/Water/OGLES3/VertShader.vsh",
"${pvrSdkDir}/Examples/Advanced/Water/OGLES3/SkyboxFShader.fsh",
"${pvrSdkDir}/Examples/Advanced/Water/OGLES3/SkyboxVShader.vsh",
"${pvrSdkDir}/Examples/Advanced/Water/OGLES3/ModelFShader.fsh",
"${pvrSdkDir}/Examples/Advanced/Water/OGLES3/ModelVShader.vsh",
"${pvrSdkDir}/Examples/Advanced/Water/OGLES3/Tex2DFShader.fsh",
"${pvrSdkDir}/Examples/Advanced/Water/OGLES3/Tex2DVShader.vsh",
"${pvrSdkDir}/Examples/Advanced/Water/OGLES3/PlaneTexFShader.fsh",
"${pvrSdkDir}/Examples/Advanced/Water/OGLES3/PlaneTexVShader.vsh",
"${pvrSdkDir}/Examples/Advanced/Water/OGLES3/Scene.pod",

)
    task copyAssets(type: Copy){
        from tree
        into 'assets'
    }

    String ndkBuildCommand = 'ndk-build';

    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        ndkBuildCommand = 'ndk-build.cmd'
    }
    task ndkBuildTools(type:Exec) {
        workingDir "${pvrSdkDir}/Tools/OGLES3/Build/Android"
        commandLine ndkBuildCommand,  '-j'
    }

    task ndkBuild(type: Exec, dependsOn:[copyAssets ,ndkBuildTools]) {
        commandLine ndkBuildCommand, '-j'
    }

    task ndkBuildClean(type: Exec) {
        commandLine ndkBuildCommand, '-j', 'clean'
    }

    task copyToBin(type: Copy) {
        from 'build/outputs/apk/'
        into 'bin/'
        include('*.apk')
   }

    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn ndkBuild
    }

    assembleRelease {
        doLast() {
            copyToBin.execute()
        }
    }

    clean.dependsOn ndkBuildClean
    clean {
        doLast() {
            delete "assets"
            delete "obj"
            delete "bin"
        }
    }

    preBuild.dependsOn copyAssets
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
}
