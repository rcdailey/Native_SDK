<pfx version="1.0.0" description="MagicLantern: Dynamic Lighting example" copyright="Imagination Technologies Ltd.">
	<texture name="marble" path="marble.pvr"/>
	<texture name="gbuff" format="rgba8888"/>

	<effect name="RenderObject">
		<pipeline name="SkinnedEffect">
			<condition type="requiresUniformSemantic" name="NORMALMAP"/>
			<condition type="requiresAttributeSemantic" name="BONEWEIGHT"/>
		</pipeline>
		<!-- Render with bumpmapping. The application needs to pick this or the next. -->
		<pipeline name="DefaultEffect">
			<condition type="requiresAttributeSemanticNotPresent" name="BONEWEIGHT"/>
		</pipeline>
		<!-- Render without bumpmapping. The application needs to pick this or the prev. -->
	</effect>

	<!--scope: 
	effect      	: Static : One per whole effect. If dynamic, must be custom set.
	model  			: One per entire Model. (Typical use: light position). If dynamic, size must be custom set.
	node 			: Must be Dynamic: One per effect, offset per Node. Definition is ONE slice. (Typical use: Modelview matrix)
	NO modelsemantic 	: One buffer per model, with a dynamic nymber that is up to a semantic defined by the model. (Typical use: light position). If dynamic, size must be custom set.
	NO mesh 		: Static : One per mesh. Definition is entire buffer slice. (Typical use: Bones)
	NO material 	: Static : One per material. Definition is entire buffer slice. (Typical use: material uniforms (material id) )
	-->
	<buffer name="PerFrameBoneBuffer" layout="STD140" scope="bonebatch" multibuffering="true">
		<entry semantic="BONEMATRIX" dataType="mat4x4" arrayElements="8"/>
		<entry semantic="BONEMATRIXIT" dataType="mat3x3" arrayElements="8" />
		<entry semantic="BONECOUNT" dataType="int"/>
	</buffer>

	<buffer name="PerFrameDefaultBuffer" layout="STD140" scope="node" multibuffering="true">
		<entry semantic="MODELWORLDMATRIX" dataType="mat4x4"/>
		<entry semantic="MODELWORLDITMATRIX" dataType="mat3x3"/>
	</buffer>

	<buffer name="PerFrameBuffer" layout="STD140" scope="effect" multibuffering="true">
		<entry semantic="VIEWPROJECTIONMATRIX" dataType="mat4x4"/>
		<entry semantic="LIGHTPOSITION" dataType="vec3"/>
	</buffer>

	<!-- LIMITATION - Semantics persist against pipelines, which means :
	DO NOT ADD THE SAME SEMANTIC ON DIFFERENT VBO BINDINGS ACROSS DIFFERENT PIPELINES THAT WILL
	BE USED IN THE SAME PASS. The second binding will be OVERRIDEN by the implementation as the
	attribute will be folded across the pass.
	Consider having an attribute binding map for the entire effect, which would force each
	attribute semantic to have a unique binding.
	-->
	<pipeline name="SkinnedEffect" primitiveTopology="triangleList">
		<rasterization  faceCulling="back" />
		<depthStencil depthTest="true" depthWrite="true"/>
		
		<vboBinding index="0" stepRate="vertex"/>

		<attribute location="0" vboBinding="0" variable="inVertex" semantic="POSITION" dataType="vec3" />
		<attribute location="1" vboBinding="0" variable="inNormal" semantic="NORMAL" dataType="vec3" />
		<attribute location="2" vboBinding="0" variable="inTangent" semantic="TANGENT" dataType="vec3" />
		<attribute location="3" vboBinding="0" variable="inBiTangent" semantic="BINORMAL" dataType="vec3" />
		<attribute location="4" vboBinding="0" variable="inTexCoord" semantic="UV0" dataType="vec2" />
		<attribute location="5" vboBinding="0" variable="inBoneWeights" semantic="BONEWEIGHT" dataType="vec4" />
		<attribute location="6" vboBinding="0" variable="inBoneIndex" semantic="BONEINDEX" dataType="uvec4" />

		<buffer type="UniformDynamic" set="1" binding="0" name="PerFrameBoneBuffer" apiVersion="VULKAN"/>
		<buffer type="Uniform" set="2" binding="0" name="PerFrameBuffer" apiVersion="VULKAN"/>

		<texture set="0" binding="0" variable="sTexture" semantic="DIFFUSEMAP"
		minification="linear" magnification="linear" mipmap="linear" wrap_s="clamp" wrap_t="clamp"/>
		<texture set="0" binding="1" variable="sNormalMap" semantic="NORMALMAP"
		minification="linear" magnification="linear" mipmap="none" wrap_s="clamp" wrap_t="clamp"/>

		<shader name="SkinnedVertexShader"/>
		<shader name="SkinnedFragmentShader"/>
	</pipeline>

	<pipeline name="DefaultEffect">
		<rasterization  faceCulling="back" />
		<depthStencil depthTest="true" depthWrite="true"/>
	
		<attribute location="0" variable="inVertex" semantic="POSITION" dataType="vec3"/>
		<attribute location="1" variable="inNormal" semantic="NORMAL" dataType="vec3"/>
		<attribute location="2" variable="inTexCoord" semantic="UV0" dataType="vec2"/>

		<buffer type="UniformDynamic" set="1" binding="0" apiVersion="VULKAN" name="PerFrameDefaultBuffer"/>
		<buffer type="Uniform" set="2" binding="0" apiVersion="VULKAN" name="PerFrameBuffer"/>

		<texture set="0" binding="0" variable="sTexture" semantic="DIFFUSEMAP"
		minification="linear" magnification="linear" mipmap="linear" wrap_s="clamp" wrap_t="clamp"/>

		<shader name="DefaultVertexShader"/>
		<shader name="DefaultFragmentShader"/>
	</pipeline>
	
	
	<shader type="vertex" name="DefaultVertexShader">
		<file apiVersion="VULKAN" path="DefaultVertShader_vk.spv"/>
	</shader>

	<shader type="fragment" name="DefaultFragmentShader">
		<file apiVersion="VULKAN" path="DefaultFragShader_vk.spv"/>
	</shader>

	<shader type="vertex" name="SkinnedVertexShader">
		<file apiVersion="VULKAN" path="SkinnedVertShader_vk.spv"/>
	</shader>

	<shader type="fragment" name="SkinnedFragmentShader">
		<file apiVersion="VULKAN" path="SkinnedFragShader_vk.spv"/>
	</shader>
</pfx>